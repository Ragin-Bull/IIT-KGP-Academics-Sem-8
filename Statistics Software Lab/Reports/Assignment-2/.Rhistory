#a) Generation of a Random Sample from a bernoulli Distribution
generate_random_sample_bernoulli <- function(n,p){
res <- c()
for(i in 1:n){
u <- runif(1,0,1)
if(u<=p){
res[i] <- 1
}else{
res[i] <- 0
}
}
return(res)
}
chi_square_test_bernoulli <- function(random_sample,p){
total_points <- length(random_sample)
E <- c()
E[1] <- total_points*(1-p)
E[2] <- total_points*p
O <- c()
O[1] <- length(random_sample[random_sample == 0])
O[2] <- total_points - O[1]
chi_square_statistics <- sum((O-E)^2/E)
print("chi_square_statistics")
print(chi_square_statistics)
critical_value <- qchisq(0.95,1)
print("critical_value")
print(critical_value)
if(chi_square_statistics>=critical_value){
print("Null Hypothesis is Rejected")
}else{
print("Null Hypothesis is Accepted")
}
}
p <- 0.323
random_sample <- generate_random_sample_bernoulli(1000,p)
random_sample_new <- generate_random_sample(1000,function(x){
if(x==0){
return(1-p)
}else{
return(p)
}
})
# General Direct Inverse Transform Method
generate_random_element <- function(fn){
i <- 0
u <- runif(1,0,1)
sum <- 0
while(TRUE){
sum <- sum + fn(i)
if(sum>u){
return(i)
}
i <- i+1;
}
}
generate_random_sample <- function(n,fn){
res <- c()
for(i in 1:n){
res[i] <- generate_random_element(fn)
}
return(res)
}
#a) Generation of a Random Sample from a bernoulli Distribution
generate_random_sample_bernoulli <- function(n,p){
res <- c()
for(i in 1:n){
u <- runif(1,0,1)
if(u<=p){
res[i] <- 1
}else{
res[i] <- 0
}
}
return(res)
}
chi_square_test_bernoulli <- function(random_sample,p){
total_points <- length(random_sample)
E <- c()
E[1] <- total_points*(1-p)
E[2] <- total_points*p
O <- c()
O[1] <- length(random_sample[random_sample == 0])
O[2] <- total_points - O[1]
chi_square_statistics <- sum((O-E)^2/E)
print("chi_square_statistics")
print(chi_square_statistics)
critical_value <- qchisq(0.95,1)
print("critical_value")
print(critical_value)
if(chi_square_statistics>=critical_value){
print("Null Hypothesis is Rejected")
}else{
print("Null Hypothesis is Accepted")
}
}
p <- 0.323
random_sample <- generate_random_sample_bernoulli(1000,p)
random_sample_new <- generate_random_sample(1000,function(x){
if(x==0){
return(1-p)
}else{
return(p)
}
})
chi_square_test_bernoulli(random_sample,p)
print("Direct Inverse Transform Method")
chi_square_test_bernoulli(random_sample_new,p)
#b) Generation of a Random Sample from a Discrete Uniform Distribution
generate_random_sample_uniform <- function(n,lo,hi){
u <- runif(n,0,1)
res <- c()
for(i in 1:n){
res[i] <- lo + floor((hi-lo+1)*u[i])
}
return(res)
}
i <- 10
j <- 200
random_sample <- generate_random_sample_uniform(1000,i,j)
pmf <- function(x){
return(1/(j-i+1))
}
random_sample_new <- generate_random_sample(1000,pmf)
chi_square_test(random_sample,pmf)
set.seed(200010)
#Chi_square_test
chi_square_test <- function(random_sample,p){
O <- c()
E <- c()
i <- 1
total_no_of_points <- length(random_sample)
for(x in unique(random_sample)){
O[i] <- length(random_sample[random_sample == x])
E[i] <- ceiling(total_no_of_points * p(x))
i <- i+1
}
chi_square_statistics <- sum((O-E)^2/E)
critical_value <- qchisq(0.95,length(unique(random_sample))-1)
print("chi_square_statistics")
print(chi_square_statistics)
print("critical_Value")
print(critical_value)
if(chi_square_statistics >= critical_value){
print("Null Hypothesis rejected")
}else{
print("Null Hypotheis Accepted")
}
}
# General Direct Inverse Transform Method
generate_random_element <- function(fn){
i <- 0
u <- runif(1,0,1)
sum <- 0
while(TRUE){
sum <- sum + fn(i)
if(sum>u){
return(i)
}
i <- i+1;
}
}
generate_random_sample <- function(n,fn){
res <- c()
for(i in 1:n){
res[i] <- generate_random_element(fn)
}
return(res)
}
#a) Generation of a Random Sample from a bernoulli Distribution
generate_random_sample_bernoulli <- function(n,p){
res <- c()
for(i in 1:n){
u <- runif(1,0,1)
if(u<=p){
res[i] <- 1
}else{
res[i] <- 0
}
}
return(res)
}
chi_square_test_bernoulli <- function(random_sample,p){
total_points <- length(random_sample)
E <- c()
E[1] <- total_points*(1-p)
E[2] <- total_points*p
O <- c()
O[1] <- length(random_sample[random_sample == 0])
O[2] <- total_points - O[1]
chi_square_statistics <- sum((O-E)^2/E)
print("chi_square_statistics")
print(chi_square_statistics)
critical_value <- qchisq(0.95,1)
print("critical_value")
print(critical_value)
if(chi_square_statistics>=critical_value){
print("Null Hypothesis is Rejected")
}else{
print("Null Hypothesis is Accepted")
}
}
p <- 0.323
random_sample <- generate_random_sample_bernoulli(1000,p)
random_sample_new <- generate_random_sample(1000,function(x){
if(x==0){
return(1-p)
}else{
return(p)
}
})
chi_square_test_bernoulli(random_sample,p)
print("Direct Inverse Transform Method")
chi_square_test_bernoulli(random_sample_new,p)
#b) Generation of a Random Sample from a Discrete Uniform Distribution
generate_random_sample_uniform <- function(n,lo,hi){
u <- runif(n,0,1)
res <- c()
for(i in 1:n){
res[i] <- lo + floor((hi-lo+1)*u[i])
}
return(res)
}
i <- 10
j <- 200
random_sample <- generate_random_sample_uniform(1000,i,j)
pmf <- function(x){
return(1/(j-i+1))
}
random_sample_new <- generate_random_sample(1000,pmf)
chi_square_test(random_sample,pmf)
print("Direct Inverse Transform Method")
chi_square_test(random_sample_new,pmf)
#c) Generation of a Random Sample from a Binomial (n,p)
generate_random_binomial <- function(num,n,p){
res <- c()
for(i in 1:num){
res[i] <- 0
}
for(i in 1:n){
Y <- generate_random_sample_bernoulli(num,p)
for(j in 1:num){
res[j] <- res[j] + Y[j]
}
}
return(res)
}
pmf <- function(x){
p <- 0.32
n <- 1000
if(x==0){
return(0)
}
return(choose(n,x)*p^x*(1-p)^(n-x))
}
random_sample <- generate_random_binomial(1000,1000,0.32)
random_sample_new <- generate_random_sample(1000,pmf)
chi_square_test(random_sample,pmf)
print("Direct Inverse Transform Method")
chi_square_test(random_sample_new,pmf)
#d) Generation of a Random Sample from a Geometric Distribution(p)
generate_random_sample_geometric = function(n,p){
res <- c()
for(i in 1:n){
u <- runif(1,0,1)
res[i] <- ceiling(log(u)/log(1-p))
}
return(res)
}
pmf <- function(x){
if(x==0){
return(0)
}
p <- 0.3
return((1-p)^(x-1)*p)
}
random_sample <- generate_random_sample_geometric(1000,0.3)
random_sample_new <- generate_random_sample(1000,pmf)re_test(random_sample_new,pmf)
